# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kipr', [dirname(__file__)])
        except ImportError:
            import _kipr
            return _kipr
        if fp is not None:
            try:
                _mod = imp.load_module('_kipr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kipr = swig_import_helper()
    del swig_import_helper
else:
    import _kipr
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class IntSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSensor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kipr.delete_IntSensor
    __del__ = lambda self : None;
    def value(self): return _kipr.IntSensor_value(self)
IntSensor_swigregister = _kipr.IntSensor_swigregister
IntSensor_swigregister(IntSensor)

class ShortSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortSensor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kipr.delete_ShortSensor
    __del__ = lambda self : None;
    def value(self): return _kipr.ShortSensor_value(self)
ShortSensor_swigregister = _kipr.ShortSensor_swigregister
ShortSensor_swigregister(ShortSensor)

class UnsignedShortSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedShortSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedShortSensor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kipr.delete_UnsignedShortSensor
    __del__ = lambda self : None;
    def value(self): return _kipr.UnsignedShortSensor_value(self)
UnsignedShortSensor_swigregister = _kipr.UnsignedShortSensor_swigregister
UnsignedShortSensor_swigregister(UnsignedShortSensor)

class BoolSensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolSensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolSensor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kipr.delete_BoolSensor
    __del__ = lambda self : None;
    def value(self): return _kipr.BoolSensor_value(self)
BoolSensor_swigregister = _kipr.BoolSensor_swigregister
BoolSensor_swigregister(BoolSensor)

class Motor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kipr.new_Motor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clearPositionCounter(self): return _kipr.Motor_clearPositionCounter(self)
    def moveAtVelocity(self, *args): return _kipr.Motor_moveAtVelocity(self, *args)
    def moveToPosition(self, *args): return _kipr.Motor_moveToPosition(self, *args)
    def moveRelativePosition(self, *args): return _kipr.Motor_moveRelativePosition(self, *args)
    def freeze(self): return _kipr.Motor_freeze(self)
    def isMotorDone(self): return _kipr.Motor_isMotorDone(self)
    def blockMotorDone(self): return _kipr.Motor_blockMotorDone(self)
    def forward(self): return _kipr.Motor_forward(self)
    def backward(self): return _kipr.Motor_backward(self)
    def motor(self, *args): return _kipr.Motor_motor(self, *args)
    def baasbennaguui(self, *args): return _kipr.Motor_baasbennaguui(self, *args)
    def motorPower(self, *args): return _kipr.Motor_motorPower(self, *args)
    def off(self): return _kipr.Motor_off(self)
    def port(self): return _kipr.Motor_port(self)
    __swig_destroy__ = _kipr.delete_Motor
    __del__ = lambda self : None;
Motor_swigregister = _kipr.Motor_swigregister
Motor_swigregister(Motor)

class BackEMF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackEMF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackEMF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kipr.new_BackEMF(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self): return _kipr.BackEMF_value(self)
    def port(self): return _kipr.BackEMF_port(self)
    __swig_destroy__ = _kipr.delete_BackEMF
    __del__ = lambda self : None;
BackEMF_swigregister = _kipr.BackEMF_swigregister
BackEMF_swigregister(BackEMF)

class Servo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Servo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Servo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kipr.new_Servo(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPosition(self, *args): return _kipr.Servo_setPosition(self, *args)
    def position(self): return _kipr.Servo_position(self)
    def disable(self): return _kipr.Servo_disable(self)
    def enable(self): return _kipr.Servo_enable(self)
    def setEnabled(self, *args): return _kipr.Servo_setEnabled(self, *args)
    def isEnabled(self): return _kipr.Servo_isEnabled(self)
    __swig_destroy__ = _kipr.delete_Servo
    __del__ = lambda self : None;
Servo_swigregister = _kipr.Servo_swigregister
Servo_swigregister(Servo)

class Rgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rgb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _kipr.Rgb_r_set
    __swig_getmethods__["r"] = _kipr.Rgb_r_get
    if _newclass:r = _swig_property(_kipr.Rgb_r_get, _kipr.Rgb_r_set)
    __swig_setmethods__["g"] = _kipr.Rgb_g_set
    __swig_getmethods__["g"] = _kipr.Rgb_g_get
    if _newclass:g = _swig_property(_kipr.Rgb_g_get, _kipr.Rgb_g_set)
    __swig_setmethods__["b"] = _kipr.Rgb_b_set
    __swig_getmethods__["b"] = _kipr.Rgb_b_get
    if _newclass:b = _swig_property(_kipr.Rgb_b_get, _kipr.Rgb_b_set)
    def __init__(self): 
        this = _kipr.new_Rgb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Rgb
    __del__ = lambda self : None;
Rgb_swigregister = _kipr.Rgb_swigregister
Rgb_swigregister(Rgb)

class Hsv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hsv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hsv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _kipr.Hsv_h_set
    __swig_getmethods__["h"] = _kipr.Hsv_h_get
    if _newclass:h = _swig_property(_kipr.Hsv_h_get, _kipr.Hsv_h_set)
    __swig_setmethods__["s"] = _kipr.Hsv_s_set
    __swig_getmethods__["s"] = _kipr.Hsv_s_get
    if _newclass:s = _swig_property(_kipr.Hsv_s_get, _kipr.Hsv_s_set)
    __swig_setmethods__["v"] = _kipr.Hsv_v_set
    __swig_getmethods__["v"] = _kipr.Hsv_v_get
    if _newclass:v = _swig_property(_kipr.Hsv_v_get, _kipr.Hsv_v_set)
    def __init__(self): 
        this = _kipr.new_Hsv()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Hsv
    __del__ = lambda self : None;
Hsv_swigregister = _kipr.Hsv_swigregister
Hsv_swigregister(Hsv)

class Battery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Battery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Battery, name)
    __repr__ = _swig_repr
    __swig_getmethods__["isCharging"] = lambda x: _kipr.Battery_isCharging
    if _newclass:isCharging = staticmethod(_kipr.Battery_isCharging)
    __swig_getmethods__["powerLevel"] = lambda x: _kipr.Battery_powerLevel
    if _newclass:powerLevel = staticmethod(_kipr.Battery_powerLevel)
    __swig_getmethods__["rawPowerADC"] = lambda x: _kipr.Battery_rawPowerADC
    if _newclass:rawPowerADC = staticmethod(_kipr.Battery_rawPowerADC)
    def __init__(self): 
        this = _kipr.new_Battery()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Battery
    __del__ = lambda self : None;
Battery_swigregister = _kipr.Battery_swigregister
Battery_swigregister(Battery)

def Battery_isCharging():
  return _kipr.Battery_isCharging()
Battery_isCharging = _kipr.Battery_isCharging

def Battery_powerLevel(battery_type=0):
  return _kipr.Battery_powerLevel(battery_type)
Battery_powerLevel = _kipr.Battery_powerLevel

def Battery_rawPowerADC():
  return _kipr.Battery_rawPowerADC()
Battery_rawPowerADC = _kipr.Battery_rawPowerADC

class Analog(UnsignedShortSensor):
    __swig_setmethods__ = {}
    for _s in [UnsignedShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analog, name, value)
    __swig_getmethods__ = {}
    for _s in [UnsignedShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Analog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kipr.new_Analog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Analog
    __del__ = lambda self : None;
    def value(self): return _kipr.Analog_value(self)
    def setPullup(self, *args): return _kipr.Analog_setPullup(self, *args)
    def pullup(self): return _kipr.Analog_pullup(self)
    def port(self): return _kipr.Analog_port(self)
Analog_swigregister = _kipr.Analog_swigregister
Analog_swigregister(Analog)

class Analog8(Analog):
    __swig_setmethods__ = {}
    for _s in [Analog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analog8, name, value)
    __swig_getmethods__ = {}
    for _s in [Analog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Analog8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kipr.new_Analog8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Analog8
    __del__ = lambda self : None;
    def value(self): return _kipr.Analog8_value(self)
Analog8_swigregister = _kipr.Analog8_swigregister
Analog8_swigregister(Analog8)

class Analog10(Analog):
    __swig_setmethods__ = {}
    for _s in [Analog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analog10, name, value)
    __swig_getmethods__ = {}
    for _s in [Analog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Analog10, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kipr.new_Analog10(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Analog10
    __del__ = lambda self : None;
    def value(self): return _kipr.Analog10_value(self)
Analog10_swigregister = _kipr.Analog10_swigregister
Analog10_swigregister(Analog10)

class Acceleration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Acceleration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Acceleration, name)
    __repr__ = _swig_repr
    __swig_getmethods__["x"] = lambda x: _kipr.Acceleration_x
    if _newclass:x = staticmethod(_kipr.Acceleration_x)
    __swig_getmethods__["y"] = lambda x: _kipr.Acceleration_y
    if _newclass:y = staticmethod(_kipr.Acceleration_y)
    __swig_getmethods__["z"] = lambda x: _kipr.Acceleration_z
    if _newclass:z = staticmethod(_kipr.Acceleration_z)
    __swig_getmethods__["calibrate"] = lambda x: _kipr.Acceleration_calibrate
    if _newclass:calibrate = staticmethod(_kipr.Acceleration_calibrate)
    def __init__(self): 
        this = _kipr.new_Acceleration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Acceleration
    __del__ = lambda self : None;
Acceleration_swigregister = _kipr.Acceleration_swigregister
Acceleration_swigregister(Acceleration)

def Acceleration_x():
  return _kipr.Acceleration_x()
Acceleration_x = _kipr.Acceleration_x

def Acceleration_y():
  return _kipr.Acceleration_y()
Acceleration_y = _kipr.Acceleration_y

def Acceleration_z():
  return _kipr.Acceleration_z()
Acceleration_z = _kipr.Acceleration_z

def Acceleration_calibrate():
  return _kipr.Acceleration_calibrate()
Acceleration_calibrate = _kipr.Acceleration_calibrate

class AccelX(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccelX, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccelX, name)
    __repr__ = _swig_repr
    def value(self): return _kipr.AccelX_value(self)
    def __init__(self): 
        this = _kipr.new_AccelX()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_AccelX
    __del__ = lambda self : None;
AccelX_swigregister = _kipr.AccelX_swigregister
AccelX_swigregister(AccelX)

class AccelY(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccelY, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccelY, name)
    __repr__ = _swig_repr
    def value(self): return _kipr.AccelY_value(self)
    def __init__(self): 
        this = _kipr.new_AccelY()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_AccelY
    __del__ = lambda self : None;
AccelY_swigregister = _kipr.AccelY_swigregister
AccelY_swigregister(AccelY)

class AccelZ(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccelZ, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccelZ, name)
    __repr__ = _swig_repr
    def value(self): return _kipr.AccelZ_value(self)
    def __init__(self): 
        this = _kipr.new_AccelZ()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_AccelZ
    __del__ = lambda self : None;
AccelZ_swigregister = _kipr.AccelZ_swigregister
AccelZ_swigregister(AccelZ)

class Compass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Compass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Compass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _kipr.new_Compass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Compass
    __del__ = lambda self : None;
    __swig_getmethods__["calibrate"] = lambda x: _kipr.Compass_calibrate
    if _newclass:calibrate = staticmethod(_kipr.Compass_calibrate)
    __swig_getmethods__["setParams"] = lambda x: _kipr.Compass_setParams
    if _newclass:setParams = staticmethod(_kipr.Compass_setParams)
    __swig_getmethods__["getAngle"] = lambda x: _kipr.Compass_getAngle
    if _newclass:getAngle = staticmethod(_kipr.Compass_getAngle)
Compass_swigregister = _kipr.Compass_swigregister
Compass_swigregister(Compass)

def Compass_calibrate():
  return _kipr.Compass_calibrate()
Compass_calibrate = _kipr.Compass_calibrate

def Compass_setParams(*args):
  return _kipr.Compass_setParams(*args)
Compass_setParams = _kipr.Compass_setParams

def Compass_getAngle():
  return _kipr.Compass_getAngle()
Compass_getAngle = _kipr.Compass_getAngle

class Gyro(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gyro, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gyro, name)
    __repr__ = _swig_repr
    __swig_getmethods__["x"] = lambda x: _kipr.Gyro_x
    if _newclass:x = staticmethod(_kipr.Gyro_x)
    __swig_getmethods__["y"] = lambda x: _kipr.Gyro_y
    if _newclass:y = staticmethod(_kipr.Gyro_y)
    __swig_getmethods__["z"] = lambda x: _kipr.Gyro_z
    if _newclass:z = staticmethod(_kipr.Gyro_z)
    __swig_getmethods__["calibrate"] = lambda x: _kipr.Gyro_calibrate
    if _newclass:calibrate = staticmethod(_kipr.Gyro_calibrate)
    def __init__(self): 
        this = _kipr.new_Gyro()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Gyro
    __del__ = lambda self : None;
Gyro_swigregister = _kipr.Gyro_swigregister
Gyro_swigregister(Gyro)

def Gyro_x():
  return _kipr.Gyro_x()
Gyro_x = _kipr.Gyro_x

def Gyro_y():
  return _kipr.Gyro_y()
Gyro_y = _kipr.Gyro_y

def Gyro_z():
  return _kipr.Gyro_z()
Gyro_z = _kipr.Gyro_z

def Gyro_calibrate():
  return _kipr.Gyro_calibrate()
Gyro_calibrate = _kipr.Gyro_calibrate

class GyroX(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GyroX, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GyroX, name)
    __repr__ = _swig_repr
    def value(self): return _kipr.GyroX_value(self)
    def __init__(self): 
        this = _kipr.new_GyroX()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_GyroX
    __del__ = lambda self : None;
GyroX_swigregister = _kipr.GyroX_swigregister
GyroX_swigregister(GyroX)

class GyroY(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GyroY, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GyroY, name)
    __repr__ = _swig_repr
    def value(self): return _kipr.GyroY_value(self)
    def __init__(self): 
        this = _kipr.new_GyroY()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_GyroY
    __del__ = lambda self : None;
GyroY_swigregister = _kipr.GyroY_swigregister
GyroY_swigregister(GyroY)

class GyroZ(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GyroZ, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GyroZ, name)
    __repr__ = _swig_repr
    def value(self): return _kipr.GyroZ_value(self)
    def __init__(self): 
        this = _kipr.new_GyroZ()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_GyroZ
    __del__ = lambda self : None;
GyroZ_swigregister = _kipr.GyroZ_swigregister
GyroZ_swigregister(GyroZ)

class Magneto(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Magneto, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Magneto, name)
    __repr__ = _swig_repr
    __swig_getmethods__["x"] = lambda x: _kipr.Magneto_x
    if _newclass:x = staticmethod(_kipr.Magneto_x)
    __swig_getmethods__["y"] = lambda x: _kipr.Magneto_y
    if _newclass:y = staticmethod(_kipr.Magneto_y)
    __swig_getmethods__["z"] = lambda x: _kipr.Magneto_z
    if _newclass:z = staticmethod(_kipr.Magneto_z)
    __swig_getmethods__["calibrate"] = lambda x: _kipr.Magneto_calibrate
    if _newclass:calibrate = staticmethod(_kipr.Magneto_calibrate)
    def __init__(self): 
        this = _kipr.new_Magneto()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Magneto
    __del__ = lambda self : None;
Magneto_swigregister = _kipr.Magneto_swigregister
Magneto_swigregister(Magneto)

def Magneto_x():
  return _kipr.Magneto_x()
Magneto_x = _kipr.Magneto_x

def Magneto_y():
  return _kipr.Magneto_y()
Magneto_y = _kipr.Magneto_y

def Magneto_z():
  return _kipr.Magneto_z()
Magneto_z = _kipr.Magneto_z

def Magneto_calibrate():
  return _kipr.Magneto_calibrate()
Magneto_calibrate = _kipr.Magneto_calibrate

class MagnetoX(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagnetoX, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagnetoX, name)
    __repr__ = _swig_repr
    def value(self): return _kipr.MagnetoX_value(self)
    def __init__(self): 
        this = _kipr.new_MagnetoX()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_MagnetoX
    __del__ = lambda self : None;
MagnetoX_swigregister = _kipr.MagnetoX_swigregister
MagnetoX_swigregister(MagnetoX)

class MagnetoY(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagnetoY, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagnetoY, name)
    __repr__ = _swig_repr
    def value(self): return _kipr.MagnetoY_value(self)
    def __init__(self): 
        this = _kipr.new_MagnetoY()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_MagnetoY
    __del__ = lambda self : None;
MagnetoY_swigregister = _kipr.MagnetoY_swigregister
MagnetoY_swigregister(MagnetoY)

class MagnetoZ(ShortSensor):
    __swig_setmethods__ = {}
    for _s in [ShortSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagnetoZ, name, value)
    __swig_getmethods__ = {}
    for _s in [ShortSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagnetoZ, name)
    __repr__ = _swig_repr
    def value(self): return _kipr.MagnetoZ_value(self)
    def __init__(self): 
        this = _kipr.new_MagnetoZ()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_MagnetoZ
    __del__ = lambda self : None;
MagnetoZ_swigregister = _kipr.MagnetoZ_swigregister
MagnetoZ_swigregister(MagnetoZ)

class AbstractButton(BoolSensor):
    __swig_setmethods__ = {}
    for _s in [BoolSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractButton, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractButton, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kipr.delete_AbstractButton
    __del__ = lambda self : None;
    def setPressed(self, *args): return _kipr.AbstractButton_setPressed(self, *args)
    def isPressed(self): return _kipr.AbstractButton_isPressed(self)
    def isNotPressed(self): return _kipr.AbstractButton_isNotPressed(self)
    def isClicked(self): return _kipr.AbstractButton_isClicked(self)
    def waitUntilReleased(self): return _kipr.AbstractButton_waitUntilReleased(self)
    def waitUntilPressed(self): return _kipr.AbstractButton_waitUntilPressed(self)
    def waitUntilClicked(self): return _kipr.AbstractButton_waitUntilClicked(self)
AbstractButton_swigregister = _kipr.AbstractButton_swigregister
AbstractButton_swigregister(AbstractButton)

class AbstractTextButton(AbstractButton):
    __swig_setmethods__ = {}
    for _s in [AbstractButton]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractTextButton, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractButton]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractTextButton, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kipr.delete_AbstractTextButton
    __del__ = lambda self : None;
    def setText(self, *args): return _kipr.AbstractTextButton_setText(self, *args)
    def text(self): return _kipr.AbstractTextButton_text(self)
    def isTextDirty(self): return _kipr.AbstractTextButton_isTextDirty(self)
    def resetText(self): return _kipr.AbstractTextButton_resetText(self)
AbstractTextButton_swigregister = _kipr.AbstractTextButton_swigregister
AbstractTextButton_swigregister(AbstractTextButton)

class IdButton(AbstractTextButton):
    __swig_setmethods__ = {}
    for _s in [AbstractTextButton]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdButton, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractTextButton]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdButton, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kipr.new_IdButton(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_IdButton
    __del__ = lambda self : None;
    def setText(self, *args): return _kipr.IdButton_setText(self, *args)
    def text(self): return _kipr.IdButton_text(self)
    def isTextDirty(self): return _kipr.IdButton_isTextDirty(self)
    def setPressed(self, *args): return _kipr.IdButton_setPressed(self, *args)
    def value(self): return _kipr.IdButton_value(self)
    def resetText(self): return _kipr.IdButton_resetText(self)
IdButton_swigregister = _kipr.IdButton_swigregister
IdButton_swigregister(IdButton)

class ExtraButtons(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtraButtons, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtraButtons, name)
    __repr__ = _swig_repr
    __swig_getmethods__["show"] = lambda x: _kipr.ExtraButtons_show
    if _newclass:show = staticmethod(_kipr.ExtraButtons_show)
    __swig_getmethods__["hide"] = lambda x: _kipr.ExtraButtons_hide
    if _newclass:hide = staticmethod(_kipr.ExtraButtons_hide)
    __swig_getmethods__["setShown"] = lambda x: _kipr.ExtraButtons_setShown
    if _newclass:setShown = staticmethod(_kipr.ExtraButtons_setShown)
    __swig_getmethods__["isShown"] = lambda x: _kipr.ExtraButtons_isShown
    if _newclass:isShown = staticmethod(_kipr.ExtraButtons_isShown)
    def __init__(self): 
        this = _kipr.new_ExtraButtons()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_ExtraButtons
    __del__ = lambda self : None;
ExtraButtons_swigregister = _kipr.ExtraButtons_swigregister
ExtraButtons_swigregister(ExtraButtons)

def ExtraButtons_show():
  return _kipr.ExtraButtons_show()
ExtraButtons_show = _kipr.ExtraButtons_show

def ExtraButtons_hide():
  return _kipr.ExtraButtons_hide()
ExtraButtons_hide = _kipr.ExtraButtons_hide

def ExtraButtons_setShown(*args):
  return _kipr.ExtraButtons_setShown(*args)
ExtraButtons_setShown = _kipr.ExtraButtons_setShown

def ExtraButtons_isShown():
  return _kipr.ExtraButtons_isShown()
ExtraButtons_isShown = _kipr.ExtraButtons_isShown

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kipr.new_Config(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["load"] = lambda x: _kipr.Config_load
    if _newclass:load = staticmethod(_kipr.Config_load)
    def save(self, *args): return _kipr.Config_save(self, *args)
    def beginGroup(self, *args): return _kipr.Config_beginGroup(self, *args)
    def endGroup(self): return _kipr.Config_endGroup(self)
    def clearGroup(self): return _kipr.Config_clearGroup(self)
    def clear(self): return _kipr.Config_clear(self)
    def containsKey(self, *args): return _kipr.Config_containsKey(self, *args)
    def boolValue(self, *args): return _kipr.Config_boolValue(self, *args)
    def intValue(self, *args): return _kipr.Config_intValue(self, *args)
    def doubleValue(self, *args): return _kipr.Config_doubleValue(self, *args)
    def stringValue(self, *args): return _kipr.Config_stringValue(self, *args)
    def setValue(self, *args): return _kipr.Config_setValue(self, *args)
    def values(self): return _kipr.Config_values(self)
    def addValues(self, *args): return _kipr.Config_addValues(self, *args)
    __swig_destroy__ = _kipr.delete_Config
    __del__ = lambda self : None;
Config_swigregister = _kipr.Config_swigregister
Config_swigregister(Config)
cvar = _kipr.cvar
all = cvar.all

def Config_load(*args):
  return _kipr.Config_load(*args)
Config_load = _kipr.Config_load

class Digital(BoolSensor):
    __swig_setmethods__ = {}
    for _s in [BoolSensor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Digital, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolSensor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Digital, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kipr.new_Digital(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValue(self, *args): return _kipr.Digital_setValue(self, *args)
    def setOutput(self, *args): return _kipr.Digital_setOutput(self, *args)
    def isOutput(self): return _kipr.Digital_isOutput(self)
    def setPullup(self, *args): return _kipr.Digital_setPullup(self, *args)
    def pullup(self): return _kipr.Digital_pullup(self)
    def value(self): return _kipr.Digital_value(self)
    __swig_destroy__ = _kipr.delete_Digital
    __del__ = lambda self : None;
Digital_swigregister = _kipr.Digital_swigregister
Digital_swigregister(Digital)


def graphics_open(*args):
  return _kipr.graphics_open(*args)
graphics_open = _kipr.graphics_open

def graphics_close():
  return _kipr.graphics_close()
graphics_close = _kipr.graphics_close

def graphics_update():
  return _kipr.graphics_update()
graphics_update = _kipr.graphics_update

def graphics_clear():
  return _kipr.graphics_clear()
graphics_clear = _kipr.graphics_clear
RGB = _kipr.RGB
BGR = _kipr.BGR

def graphics_blit(*args):
  return _kipr.graphics_blit(*args)
graphics_blit = _kipr.graphics_blit

def graphics_blit_region(*args):
  return _kipr.graphics_blit_region(*args)
graphics_blit_region = _kipr.graphics_blit_region

def graphics_blit_enc(*args):
  return _kipr.graphics_blit_enc(*args)
graphics_blit_enc = _kipr.graphics_blit_enc

def graphics_blit_region_enc(*args):
  return _kipr.graphics_blit_region_enc(*args)
graphics_blit_region_enc = _kipr.graphics_blit_region_enc

def graphics_fill(*args):
  return _kipr.graphics_fill(*args)
graphics_fill = _kipr.graphics_fill

def graphics_pixel(*args):
  return _kipr.graphics_pixel(*args)
graphics_pixel = _kipr.graphics_pixel

def graphics_line(*args):
  return _kipr.graphics_line(*args)
graphics_line = _kipr.graphics_line

def graphics_circle(*args):
  return _kipr.graphics_circle(*args)
graphics_circle = _kipr.graphics_circle

def graphics_circle_fill(*args):
  return _kipr.graphics_circle_fill(*args)
graphics_circle_fill = _kipr.graphics_circle_fill

def graphics_rectangle(*args):
  return _kipr.graphics_rectangle(*args)
graphics_rectangle = _kipr.graphics_rectangle

def graphics_rectangle_fill(*args):
  return _kipr.graphics_rectangle_fill(*args)
graphics_rectangle_fill = _kipr.graphics_rectangle_fill

def graphics_triangle(*args):
  return _kipr.graphics_triangle(*args)
graphics_triangle = _kipr.graphics_triangle

def graphics_triangle_fill(*args):
  return _kipr.graphics_triangle_fill(*args)
graphics_triangle_fill = _kipr.graphics_triangle_fill

def get_key_state(*args):
  return _kipr.get_key_state(*args)
get_key_state = _kipr.get_key_state

def get_mouse_position(*args):
  return _kipr.get_mouse_position(*args)
get_mouse_position = _kipr.get_mouse_position

def get_mouse_middle_button():
  return _kipr.get_mouse_middle_button()
get_mouse_middle_button = _kipr.get_mouse_middle_button

def get_mouse_left_button():
  return _kipr.get_mouse_left_button()
get_mouse_left_button = _kipr.get_mouse_left_button

def get_mouse_right_button():
  return _kipr.get_mouse_right_button()
get_mouse_right_button = _kipr.get_mouse_right_button
class Mutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mutex, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _kipr.new_Mutex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_Mutex
    __del__ = lambda self : None;
    def lock(self): return _kipr.Mutex_lock(self)
    def tryLock(self): return _kipr.Mutex_tryLock(self)
    def unlock(self): return _kipr.Mutex_unlock(self)
Mutex_swigregister = _kipr.Mutex_swigregister
Mutex_swigregister(Mutex)

class Thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thread, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kipr.delete_Thread
    __del__ = lambda self : None;
    def start(self): return _kipr.Thread_start(self)
    def join(self): return _kipr.Thread_join(self)
    def run(self): return _kipr.Thread_run(self)
Thread_swigregister = _kipr.Thread_swigregister
Thread_swigregister(Thread)


def get_motor_position_counter(*args):
  return _kipr.get_motor_position_counter(*args)
get_motor_position_counter = _kipr.get_motor_position_counter

def gmpc(*args):
  return _kipr.gmpc(*args)
gmpc = _kipr.gmpc

def clear_motor_position_counter(*args):
  return _kipr.clear_motor_position_counter(*args)
clear_motor_position_counter = _kipr.clear_motor_position_counter

def cmpc(*args):
  return _kipr.cmpc(*args)
cmpc = _kipr.cmpc

def move_at_velocity(*args):
  return _kipr.move_at_velocity(*args)
move_at_velocity = _kipr.move_at_velocity

def mav(*args):
  return _kipr.mav(*args)
mav = _kipr.mav

def move_to_position(*args):
  return _kipr.move_to_position(*args)
move_to_position = _kipr.move_to_position

def mtp(*args):
  return _kipr.mtp(*args)
mtp = _kipr.mtp

def move_relative_position(*args):
  return _kipr.move_relative_position(*args)
move_relative_position = _kipr.move_relative_position

def mrp(*args):
  return _kipr.mrp(*args)
mrp = _kipr.mrp

def set_pid_gains(*args):
  return _kipr.set_pid_gains(*args)
set_pid_gains = _kipr.set_pid_gains

def get_pid_gains(*args):
  return _kipr.get_pid_gains(*args)
get_pid_gains = _kipr.get_pid_gains

def freeze(*args):
  return _kipr.freeze(*args)
freeze = _kipr.freeze

def get_motor_done(*args):
  return _kipr.get_motor_done(*args)
get_motor_done = _kipr.get_motor_done

def block_motor_done(*args):
  return _kipr.block_motor_done(*args)
block_motor_done = _kipr.block_motor_done

def bmd(*args):
  return _kipr.bmd(*args)
bmd = _kipr.bmd

def setpwm(*args):
  return _kipr.setpwm(*args)
setpwm = _kipr.setpwm

def getpwm(*args):
  return _kipr.getpwm(*args)
getpwm = _kipr.getpwm

def fd(*args):
  return _kipr.fd(*args)
fd = _kipr.fd

def bk(*args):
  return _kipr.bk(*args)
bk = _kipr.bk

def motor(*args):
  return _kipr.motor(*args)
motor = _kipr.motor

def baasbennaguui(*args):
  return _kipr.baasbennaguui(*args)
baasbennaguui = _kipr.baasbennaguui

def motor_power(*args):
  return _kipr.motor_power(*args)
motor_power = _kipr.motor_power

def off(*args):
  return _kipr.off(*args)
off = _kipr.off

def alloff():
  return _kipr.alloff()
alloff = _kipr.alloff

def ao():
  return _kipr.ao()
ao = _kipr.ao
class point2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _kipr.point2_x_set
    __swig_getmethods__["x"] = _kipr.point2_x_get
    if _newclass:x = _swig_property(_kipr.point2_x_get, _kipr.point2_x_set)
    __swig_setmethods__["y"] = _kipr.point2_y_set
    __swig_getmethods__["y"] = _kipr.point2_y_get
    if _newclass:y = _swig_property(_kipr.point2_y_get, _kipr.point2_y_set)
    def __init__(self): 
        this = _kipr.new_point2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_point2
    __del__ = lambda self : None;
point2_swigregister = _kipr.point2_swigregister
point2_swigregister(point2)

class point3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _kipr.point3_x_set
    __swig_getmethods__["x"] = _kipr.point3_x_get
    if _newclass:x = _swig_property(_kipr.point3_x_get, _kipr.point3_x_set)
    __swig_setmethods__["y"] = _kipr.point3_y_set
    __swig_getmethods__["y"] = _kipr.point3_y_get
    if _newclass:y = _swig_property(_kipr.point3_y_get, _kipr.point3_y_set)
    __swig_setmethods__["z"] = _kipr.point3_z_set
    __swig_getmethods__["z"] = _kipr.point3_z_get
    if _newclass:z = _swig_property(_kipr.point3_z_get, _kipr.point3_z_set)
    def __init__(self): 
        this = _kipr.new_point3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_point3
    __del__ = lambda self : None;
point3_swigregister = _kipr.point3_swigregister
point3_swigregister(point3)

class rectangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rectangle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ulx"] = _kipr.rectangle_ulx_set
    __swig_getmethods__["ulx"] = _kipr.rectangle_ulx_get
    if _newclass:ulx = _swig_property(_kipr.rectangle_ulx_get, _kipr.rectangle_ulx_set)
    __swig_setmethods__["uly"] = _kipr.rectangle_uly_set
    __swig_getmethods__["uly"] = _kipr.rectangle_uly_get
    if _newclass:uly = _swig_property(_kipr.rectangle_uly_get, _kipr.rectangle_uly_set)
    __swig_setmethods__["width"] = _kipr.rectangle_width_set
    __swig_getmethods__["width"] = _kipr.rectangle_width_get
    if _newclass:width = _swig_property(_kipr.rectangle_width_get, _kipr.rectangle_width_set)
    __swig_setmethods__["height"] = _kipr.rectangle_height_set
    __swig_getmethods__["height"] = _kipr.rectangle_height_get
    if _newclass:height = _swig_property(_kipr.rectangle_height_get, _kipr.rectangle_height_set)
    def __init__(self): 
        this = _kipr.new_rectangle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_rectangle
    __del__ = lambda self : None;
rectangle_swigregister = _kipr.rectangle_swigregister
rectangle_swigregister(rectangle)


def create_point2(*args):
  return _kipr.create_point2(*args)
create_point2 = _kipr.create_point2

def create_point3(*args):
  return _kipr.create_point3(*args)
create_point3 = _kipr.create_point3

def create_rectangle(*args):
  return _kipr.create_rectangle(*args)
create_rectangle = _kipr.create_rectangle

def enable_servo(*args):
  return _kipr.enable_servo(*args)
enable_servo = _kipr.enable_servo

def disable_servo(*args):
  return _kipr.disable_servo(*args)
disable_servo = _kipr.disable_servo

def enable_servos():
  return _kipr.enable_servos()
enable_servos = _kipr.enable_servos

def disable_servos():
  return _kipr.disable_servos()
disable_servos = _kipr.disable_servos

def set_servo_enabled(*args):
  return _kipr.set_servo_enabled(*args)
set_servo_enabled = _kipr.set_servo_enabled

def get_servo_enabled(*args):
  return _kipr.get_servo_enabled(*args)
get_servo_enabled = _kipr.get_servo_enabled

def get_servo_position(*args):
  return _kipr.get_servo_position(*args)
get_servo_position = _kipr.get_servo_position

def set_servo_position(*args):
  return _kipr.set_servo_position(*args)
set_servo_position = _kipr.set_servo_position

def msleep(*args):
  return _kipr.msleep(*args)
msleep = _kipr.msleep

def iitxash(*args):
  return _kipr.iitxash(*args)
iitxash = _kipr.iitxash

def systime():
  return _kipr.systime()
systime = _kipr.systime

def seconds():
  return _kipr.seconds()
seconds = _kipr.seconds

def create_connect():
  return _kipr.create_connect()
create_connect = _kipr.create_connect

def create_connect_once():
  return _kipr.create_connect_once()
create_connect_once = _kipr.create_connect_once

def create_disconnect():
  return _kipr.create_disconnect()
create_disconnect = _kipr.create_disconnect

def create_start():
  return _kipr.create_start()
create_start = _kipr.create_start

def create_passive():
  return _kipr.create_passive()
create_passive = _kipr.create_passive

def create_safe():
  return _kipr.create_safe()
create_safe = _kipr.create_safe

def create_full():
  return _kipr.create_full()
create_full = _kipr.create_full

def create_spot():
  return _kipr.create_spot()
create_spot = _kipr.create_spot

def create_cover():
  return _kipr.create_cover()
create_cover = _kipr.create_cover

def create_demo(*args):
  return _kipr.create_demo(*args)
create_demo = _kipr.create_demo

def create_cover_dock():
  return _kipr.create_cover_dock()
create_cover_dock = _kipr.create_cover_dock

def get_create_mode():
  return _kipr.get_create_mode()
get_create_mode = _kipr.get_create_mode

def get_create_lbump():
  return _kipr.get_create_lbump()
get_create_lbump = _kipr.get_create_lbump

def get_create_rbump():
  return _kipr.get_create_rbump()
get_create_rbump = _kipr.get_create_rbump

def get_create_lwdrop():
  return _kipr.get_create_lwdrop()
get_create_lwdrop = _kipr.get_create_lwdrop

def get_create_cwdrop():
  return _kipr.get_create_cwdrop()
get_create_cwdrop = _kipr.get_create_cwdrop

def get_create_rwdrop():
  return _kipr.get_create_rwdrop()
get_create_rwdrop = _kipr.get_create_rwdrop

def get_create_wall():
  return _kipr.get_create_wall()
get_create_wall = _kipr.get_create_wall

def get_create_lcliff():
  return _kipr.get_create_lcliff()
get_create_lcliff = _kipr.get_create_lcliff

def get_create_lfcliff():
  return _kipr.get_create_lfcliff()
get_create_lfcliff = _kipr.get_create_lfcliff

def get_create_rfcliff():
  return _kipr.get_create_rfcliff()
get_create_rfcliff = _kipr.get_create_rfcliff

def get_create_rcliff():
  return _kipr.get_create_rcliff()
get_create_rcliff = _kipr.get_create_rcliff

def get_create_llightbump():
  return _kipr.get_create_llightbump()
get_create_llightbump = _kipr.get_create_llightbump

def get_create_lflightbump():
  return _kipr.get_create_lflightbump()
get_create_lflightbump = _kipr.get_create_lflightbump

def get_create_lclightbump():
  return _kipr.get_create_lclightbump()
get_create_lclightbump = _kipr.get_create_lclightbump

def get_create_rclightbump():
  return _kipr.get_create_rclightbump()
get_create_rclightbump = _kipr.get_create_rclightbump

def get_create_rflightbump():
  return _kipr.get_create_rflightbump()
get_create_rflightbump = _kipr.get_create_rflightbump

def get_create_rlightbump():
  return _kipr.get_create_rlightbump()
get_create_rlightbump = _kipr.get_create_rlightbump

def get_create_llightbump_amt():
  return _kipr.get_create_llightbump_amt()
get_create_llightbump_amt = _kipr.get_create_llightbump_amt

def get_create_rlightbump_amt():
  return _kipr.get_create_rlightbump_amt()
get_create_rlightbump_amt = _kipr.get_create_rlightbump_amt

def get_create_lflightbump_amt():
  return _kipr.get_create_lflightbump_amt()
get_create_lflightbump_amt = _kipr.get_create_lflightbump_amt

def get_create_lclightbump_amt():
  return _kipr.get_create_lclightbump_amt()
get_create_lclightbump_amt = _kipr.get_create_lclightbump_amt

def get_create_rclightbump_amt():
  return _kipr.get_create_rclightbump_amt()
get_create_rclightbump_amt = _kipr.get_create_rclightbump_amt

def get_create_rflightbump_amt():
  return _kipr.get_create_rflightbump_amt()
get_create_rflightbump_amt = _kipr.get_create_rflightbump_amt

def get_create_vwall():
  return _kipr.get_create_vwall()
get_create_vwall = _kipr.get_create_vwall

def get_create_overcurrents():
  return _kipr.get_create_overcurrents()
get_create_overcurrents = _kipr.get_create_overcurrents

def get_create_infrared():
  return _kipr.get_create_infrared()
get_create_infrared = _kipr.get_create_infrared

def get_create_advance_button():
  return _kipr.get_create_advance_button()
get_create_advance_button = _kipr.get_create_advance_button

def get_create_play_button():
  return _kipr.get_create_play_button()
get_create_play_button = _kipr.get_create_play_button

def get_create_normalized_angle():
  return _kipr.get_create_normalized_angle()
get_create_normalized_angle = _kipr.get_create_normalized_angle

def set_create_normalized_angle(*args):
  return _kipr.set_create_normalized_angle(*args)
set_create_normalized_angle = _kipr.set_create_normalized_angle

def get_create_total_angle():
  return _kipr.get_create_total_angle()
get_create_total_angle = _kipr.get_create_total_angle

def set_create_total_angle(*args):
  return _kipr.set_create_total_angle(*args)
set_create_total_angle = _kipr.set_create_total_angle

def get_create_distance():
  return _kipr.get_create_distance()
get_create_distance = _kipr.get_create_distance

def set_create_distance(*args):
  return _kipr.set_create_distance(*args)
set_create_distance = _kipr.set_create_distance

def get_create_battery_charging_state():
  return _kipr.get_create_battery_charging_state()
get_create_battery_charging_state = _kipr.get_create_battery_charging_state

def get_create_battery_voltage():
  return _kipr.get_create_battery_voltage()
get_create_battery_voltage = _kipr.get_create_battery_voltage

def get_create_battery_current():
  return _kipr.get_create_battery_current()
get_create_battery_current = _kipr.get_create_battery_current

def get_create_battery_temp():
  return _kipr.get_create_battery_temp()
get_create_battery_temp = _kipr.get_create_battery_temp

def get_create_battery_charge():
  return _kipr.get_create_battery_charge()
get_create_battery_charge = _kipr.get_create_battery_charge

def get_create_battery_capacity():
  return _kipr.get_create_battery_capacity()
get_create_battery_capacity = _kipr.get_create_battery_capacity

def get_create_wall_amt():
  return _kipr.get_create_wall_amt()
get_create_wall_amt = _kipr.get_create_wall_amt

def get_create_lcliff_amt():
  return _kipr.get_create_lcliff_amt()
get_create_lcliff_amt = _kipr.get_create_lcliff_amt

def get_create_lfcliff_amt():
  return _kipr.get_create_lfcliff_amt()
get_create_lfcliff_amt = _kipr.get_create_lfcliff_amt

def get_create_rfcliff_amt():
  return _kipr.get_create_rfcliff_amt()
get_create_rfcliff_amt = _kipr.get_create_rfcliff_amt

def get_create_rcliff_amt():
  return _kipr.get_create_rcliff_amt()
get_create_rcliff_amt = _kipr.get_create_rcliff_amt

def get_create_bay_DI():
  return _kipr.get_create_bay_DI()
get_create_bay_DI = _kipr.get_create_bay_DI

def get_create_bay_AI():
  return _kipr.get_create_bay_AI()
get_create_bay_AI = _kipr.get_create_bay_AI

def get_create_song_number():
  return _kipr.get_create_song_number()
get_create_song_number = _kipr.get_create_song_number

def get_create_song_playing():
  return _kipr.get_create_song_playing()
get_create_song_playing = _kipr.get_create_song_playing

def get_create_number_of_stream_packets():
  return _kipr.get_create_number_of_stream_packets()
get_create_number_of_stream_packets = _kipr.get_create_number_of_stream_packets

def get_create_requested_velocity():
  return _kipr.get_create_requested_velocity()
get_create_requested_velocity = _kipr.get_create_requested_velocity

def get_create_requested_radius():
  return _kipr.get_create_requested_radius()
get_create_requested_radius = _kipr.get_create_requested_radius

def get_create_requested_right_velocity():
  return _kipr.get_create_requested_right_velocity()
get_create_requested_right_velocity = _kipr.get_create_requested_right_velocity

def get_create_requested_left_velocity():
  return _kipr.get_create_requested_left_velocity()
get_create_requested_left_velocity = _kipr.get_create_requested_left_velocity

def create_stop():
  return _kipr.create_stop()
create_stop = _kipr.create_stop

def create_drive(*args):
  return _kipr.create_drive(*args)
create_drive = _kipr.create_drive

def create_drive_straight(*args):
  return _kipr.create_drive_straight(*args)
create_drive_straight = _kipr.create_drive_straight

def create_spin_CW(*args):
  return _kipr.create_spin_CW(*args)
create_spin_CW = _kipr.create_spin_CW

def create_spin_CCW(*args):
  return _kipr.create_spin_CCW(*args)
create_spin_CCW = _kipr.create_spin_CCW

def create_drive_direct(*args):
  return _kipr.create_drive_direct(*args)
create_drive_direct = _kipr.create_drive_direct

def create_spin_block(*args):
  return _kipr.create_spin_block(*args)
create_spin_block = _kipr.create_spin_block

def _create_get_raw_encoders(*args):
  return _kipr._create_get_raw_encoders(*args)
_create_get_raw_encoders = _kipr._create_get_raw_encoders

def create_advance_led(*args):
  return _kipr.create_advance_led(*args)
create_advance_led = _kipr.create_advance_led

def create_play_led(*args):
  return _kipr.create_play_led(*args)
create_play_led = _kipr.create_play_led

def create_power_led(*args):
  return _kipr.create_power_led(*args)
create_power_led = _kipr.create_power_led

def create_digital_output(*args):
  return _kipr.create_digital_output(*args)
create_digital_output = _kipr.create_digital_output

def create_pwm_low_side_drivers(*args):
  return _kipr.create_pwm_low_side_drivers(*args)
create_pwm_low_side_drivers = _kipr.create_pwm_low_side_drivers

def create_low_side_drivers(*args):
  return _kipr.create_low_side_drivers(*args)
create_low_side_drivers = _kipr.create_low_side_drivers

def create_load_song(*args):
  return _kipr.create_load_song(*args)
create_load_song = _kipr.create_load_song

def create_play_song(*args):
  return _kipr.create_play_song(*args)
create_play_song = _kipr.create_play_song

def create_read_block(*args):
  return _kipr.create_read_block(*args)
create_read_block = _kipr.create_read_block

def create_write_byte(*args):
  return _kipr.create_write_byte(*args)
create_write_byte = _kipr.create_write_byte

def create_clear_serial_buffer():
  return _kipr.create_clear_serial_buffer()
create_clear_serial_buffer = _kipr.create_clear_serial_buffer
Baud57600 = _kipr.Baud57600
Baud115200 = _kipr.Baud115200

def get_create_baud_rate():
  return _kipr.get_create_baud_rate()
get_create_baud_rate = _kipr.get_create_baud_rate

def set_create_baud_rate(*args):
  return _kipr.set_create_baud_rate(*args)
set_create_baud_rate = _kipr.set_create_baud_rate

def battery_charging():
  return _kipr.battery_charging()
battery_charging = _kipr.battery_charging

def power_level():
  return _kipr.power_level()
power_level = _kipr.power_level

def power_level_nimh():
  return _kipr.power_level_nimh()
power_level_nimh = _kipr.power_level_nimh

def power_level_lipo():
  return _kipr.power_level_lipo()
power_level_lipo = _kipr.power_level_lipo

def power_level_life():
  return _kipr.power_level_life()
power_level_life = _kipr.power_level_life

def analog(*args):
  return _kipr.analog(*args)
analog = _kipr.analog

def analog8(*args):
  return _kipr.analog8(*args)
analog8 = _kipr.analog8

def analog10(*args):
  return _kipr.analog10(*args)
analog10 = _kipr.analog10

def analog12(*args):
  return _kipr.analog12(*args)
analog12 = _kipr.analog12

def analog_et(*args):
  return _kipr.analog_et(*args)
analog_et = _kipr.analog_et

def set_analog_pullup(*args):
  return _kipr.set_analog_pullup(*args)
set_analog_pullup = _kipr.set_analog_pullup

def get_analog_pullup(*args):
  return _kipr.get_analog_pullup(*args)
get_analog_pullup = _kipr.get_analog_pullup

def set_auto_publish(*args):
  return _kipr.set_auto_publish(*args)
set_auto_publish = _kipr.set_auto_publish

def publish():
  return _kipr.publish()
publish = _kipr.publish

def halt():
  return _kipr.halt()
halt = _kipr.halt

def freeze_halt():
  return _kipr.freeze_halt()
freeze_halt = _kipr.freeze_halt

def accel_x():
  return _kipr.accel_x()
accel_x = _kipr.accel_x

def accel_y():
  return _kipr.accel_y()
accel_y = _kipr.accel_y

def accel_z():
  return _kipr.accel_z()
accel_z = _kipr.accel_z

def accel_calibrate():
  return _kipr.accel_calibrate()
accel_calibrate = _kipr.accel_calibrate

def calibrate_compass():
  return _kipr.calibrate_compass()
calibrate_compass = _kipr.calibrate_compass

def set_compass_params(*args):
  return _kipr.set_compass_params(*args)
set_compass_params = _kipr.set_compass_params

def get_compass_angle():
  return _kipr.get_compass_angle()
get_compass_angle = _kipr.get_compass_angle

def gyro_x():
  return _kipr.gyro_x()
gyro_x = _kipr.gyro_x

def gyro_y():
  return _kipr.gyro_y()
gyro_y = _kipr.gyro_y

def gyro_z():
  return _kipr.gyro_z()
gyro_z = _kipr.gyro_z

def gyro_calibrate():
  return _kipr.gyro_calibrate()
gyro_calibrate = _kipr.gyro_calibrate

def magneto_x():
  return _kipr.magneto_x()
magneto_x = _kipr.magneto_x

def magneto_y():
  return _kipr.magneto_y()
magneto_y = _kipr.magneto_y

def magneto_z():
  return _kipr.magneto_z()
magneto_z = _kipr.magneto_z

def magneto_calibrate():
  return _kipr.magneto_calibrate()
magneto_calibrate = _kipr.magneto_calibrate
class pixel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pixel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _kipr.pixel_r_set
    __swig_getmethods__["r"] = _kipr.pixel_r_get
    if _newclass:r = _swig_property(_kipr.pixel_r_get, _kipr.pixel_r_set)
    __swig_setmethods__["g"] = _kipr.pixel_g_set
    __swig_getmethods__["g"] = _kipr.pixel_g_get
    if _newclass:g = _swig_property(_kipr.pixel_g_get, _kipr.pixel_g_set)
    __swig_setmethods__["b"] = _kipr.pixel_b_set
    __swig_getmethods__["b"] = _kipr.pixel_b_get
    if _newclass:b = _swig_property(_kipr.pixel_b_get, _kipr.pixel_b_set)
    def __init__(self): 
        this = _kipr.new_pixel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_pixel
    __del__ = lambda self : None;
pixel_swigregister = _kipr.pixel_swigregister
pixel_swigregister(pixel)

LOW_RES = _kipr.LOW_RES
MED_RES = _kipr.MED_RES
HIGH_RES = _kipr.HIGH_RES
NATIVE_RES = _kipr.NATIVE_RES
WHITE_2016 = _kipr.WHITE_2016
BLACK_2017 = _kipr.BLACK_2017

def camera_open():
  return _kipr.camera_open()
camera_open = _kipr.camera_open

def camera_open_black():
  return _kipr.camera_open_black()
camera_open_black = _kipr.camera_open_black

def camera_open_at_res(*args):
  return _kipr.camera_open_at_res(*args)
camera_open_at_res = _kipr.camera_open_at_res

def camera_open_device(*args):
  return _kipr.camera_open_device(*args)
camera_open_device = _kipr.camera_open_device

def camera_open_device_model_at_res(*args):
  return _kipr.camera_open_device_model_at_res(*args)
camera_open_device_model_at_res = _kipr.camera_open_device_model_at_res

def camera_load_config(*args):
  return _kipr.camera_load_config(*args)
camera_load_config = _kipr.camera_load_config

def set_camera_width(*args):
  return _kipr.set_camera_width(*args)
set_camera_width = _kipr.set_camera_width

def set_camera_height(*args):
  return _kipr.set_camera_height(*args)
set_camera_height = _kipr.set_camera_height

def get_camera_width():
  return _kipr.get_camera_width()
get_camera_width = _kipr.get_camera_width

def get_camera_height():
  return _kipr.get_camera_height()
get_camera_height = _kipr.get_camera_height

def camera_update():
  return _kipr.camera_update()
camera_update = _kipr.camera_update

def get_camera_pixel(*args):
  return _kipr.get_camera_pixel(*args)
get_camera_pixel = _kipr.get_camera_pixel

def get_channel_count():
  return _kipr.get_channel_count()
get_channel_count = _kipr.get_channel_count

def get_object_count(*args):
  return _kipr.get_object_count(*args)
get_object_count = _kipr.get_object_count

def get_object_data(*args):
  return _kipr.get_object_data(*args)
get_object_data = _kipr.get_object_data

def get_code_num(*args):
  return _kipr.get_code_num(*args)
get_code_num = _kipr.get_code_num

def get_object_data_length(*args):
  return _kipr.get_object_data_length(*args)
get_object_data_length = _kipr.get_object_data_length

def get_object_confidence(*args):
  return _kipr.get_object_confidence(*args)
get_object_confidence = _kipr.get_object_confidence

def get_object_area(*args):
  return _kipr.get_object_area(*args)
get_object_area = _kipr.get_object_area

def get_object_bbox(*args):
  return _kipr.get_object_bbox(*args)
get_object_bbox = _kipr.get_object_bbox

def get_object_bbox_ulx(*args):
  return _kipr.get_object_bbox_ulx(*args)
get_object_bbox_ulx = _kipr.get_object_bbox_ulx

def get_object_bbox_uly(*args):
  return _kipr.get_object_bbox_uly(*args)
get_object_bbox_uly = _kipr.get_object_bbox_uly

def get_object_bbox_brx(*args):
  return _kipr.get_object_bbox_brx(*args)
get_object_bbox_brx = _kipr.get_object_bbox_brx

def get_object_bbox_bry(*args):
  return _kipr.get_object_bbox_bry(*args)
get_object_bbox_bry = _kipr.get_object_bbox_bry

def get_object_bbox_width(*args):
  return _kipr.get_object_bbox_width(*args)
get_object_bbox_width = _kipr.get_object_bbox_width

def get_object_bbox_height(*args):
  return _kipr.get_object_bbox_height(*args)
get_object_bbox_height = _kipr.get_object_bbox_height

def get_object_centroid(*args):
  return _kipr.get_object_centroid(*args)
get_object_centroid = _kipr.get_object_centroid

def get_object_centroid_column(*args):
  return _kipr.get_object_centroid_column(*args)
get_object_centroid_column = _kipr.get_object_centroid_column

def get_object_centroid_x(*args):
  return _kipr.get_object_centroid_x(*args)
get_object_centroid_x = _kipr.get_object_centroid_x

def get_object_centroid_row(*args):
  return _kipr.get_object_centroid_row(*args)
get_object_centroid_row = _kipr.get_object_centroid_row

def get_object_centroid_y(*args):
  return _kipr.get_object_centroid_y(*args)
get_object_centroid_y = _kipr.get_object_centroid_y

def get_object_center(*args):
  return _kipr.get_object_center(*args)
get_object_center = _kipr.get_object_center

def get_object_center_column(*args):
  return _kipr.get_object_center_column(*args)
get_object_center_column = _kipr.get_object_center_column

def get_object_center_x(*args):
  return _kipr.get_object_center_x(*args)
get_object_center_x = _kipr.get_object_center_x

def get_object_center_row(*args):
  return _kipr.get_object_center_row(*args)
get_object_center_row = _kipr.get_object_center_row

def get_object_center_y(*args):
  return _kipr.get_object_center_y(*args)
get_object_center_y = _kipr.get_object_center_y

def camera_close():
  return _kipr.camera_close()
camera_close = _kipr.camera_close

def set_camera_config_base_path(*args):
  return _kipr.set_camera_config_base_path(*args)
set_camera_config_base_path = _kipr.set_camera_config_base_path

def get_camera_frame_row(*args):
  return _kipr.get_camera_frame_row(*args)
get_camera_frame_row = _kipr.get_camera_frame_row

def get_camera_frame():
  return _kipr.get_camera_frame()
get_camera_frame = _kipr.get_camera_frame

def get_camera_element_size():
  return _kipr.get_camera_element_size()
get_camera_element_size = _kipr.get_camera_element_size

def set_a_button_text(*args):
  return _kipr.set_a_button_text(*args)
set_a_button_text = _kipr.set_a_button_text

def set_b_button_text(*args):
  return _kipr.set_b_button_text(*args)
set_b_button_text = _kipr.set_b_button_text

def set_c_button_text(*args):
  return _kipr.set_c_button_text(*args)
set_c_button_text = _kipr.set_c_button_text

def set_x_button_text(*args):
  return _kipr.set_x_button_text(*args)
set_x_button_text = _kipr.set_x_button_text

def set_y_button_text(*args):
  return _kipr.set_y_button_text(*args)
set_y_button_text = _kipr.set_y_button_text

def set_z_button_text(*args):
  return _kipr.set_z_button_text(*args)
set_z_button_text = _kipr.set_z_button_text

def a_button():
  return _kipr.a_button()
a_button = _kipr.a_button

def b_button():
  return _kipr.b_button()
b_button = _kipr.b_button

def c_button():
  return _kipr.c_button()
c_button = _kipr.c_button

def x_button():
  return _kipr.x_button()
x_button = _kipr.x_button

def y_button():
  return _kipr.y_button()
y_button = _kipr.y_button

def z_button():
  return _kipr.z_button()
z_button = _kipr.z_button

def side_button():
  return _kipr.side_button()
side_button = _kipr.side_button

def black_button():
  return _kipr.black_button()
black_button = _kipr.black_button

def push_button():
  return _kipr.push_button()
push_button = _kipr.push_button

def left_button():
  return _kipr.left_button()
left_button = _kipr.left_button

def right_button():
  return _kipr.right_button()
right_button = _kipr.right_button

def a_button_clicked():
  return _kipr.a_button_clicked()
a_button_clicked = _kipr.a_button_clicked

def b_button_clicked():
  return _kipr.b_button_clicked()
b_button_clicked = _kipr.b_button_clicked

def c_button_clicked():
  return _kipr.c_button_clicked()
c_button_clicked = _kipr.c_button_clicked

def x_button_clicked():
  return _kipr.x_button_clicked()
x_button_clicked = _kipr.x_button_clicked

def y_button_clicked():
  return _kipr.y_button_clicked()
y_button_clicked = _kipr.y_button_clicked

def z_button_clicked():
  return _kipr.z_button_clicked()
z_button_clicked = _kipr.z_button_clicked

def side_button_clicked():
  return _kipr.side_button_clicked()
side_button_clicked = _kipr.side_button_clicked

def any_button():
  return _kipr.any_button()
any_button = _kipr.any_button

def extra_buttons_show():
  return _kipr.extra_buttons_show()
extra_buttons_show = _kipr.extra_buttons_show

def extra_buttons_hide():
  return _kipr.extra_buttons_hide()
extra_buttons_hide = _kipr.extra_buttons_hide

def get_extra_buttons_visible():
  return _kipr.get_extra_buttons_visible()
get_extra_buttons_visible = _kipr.get_extra_buttons_visible

def set_extra_buttons_visible(*args):
  return _kipr.set_extra_buttons_visible(*args)
set_extra_buttons_visible = _kipr.set_extra_buttons_visible

def shut_down_in(*args):
  return _kipr.shut_down_in(*args)
shut_down_in = _kipr.shut_down_in

def wait_for_light(*args):
  return _kipr.wait_for_light(*args)
wait_for_light = _kipr.wait_for_light

def console_clear():
  return _kipr.console_clear()
console_clear = _kipr.console_clear

def beep():
  return _kipr.beep()
beep = _kipr.beep
class mutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mutex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _kipr.mutex_data_set
    __swig_getmethods__["data"] = _kipr.mutex_data_get
    if _newclass:data = _swig_property(_kipr.mutex_data_get, _kipr.mutex_data_set)
    def __init__(self): 
        this = _kipr.new_mutex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_mutex
    __del__ = lambda self : None;
mutex_swigregister = _kipr.mutex_swigregister
mutex_swigregister(mutex)

class thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, thread, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _kipr.thread_data_set
    __swig_getmethods__["data"] = _kipr.thread_data_get
    if _newclass:data = _swig_property(_kipr.thread_data_get, _kipr.thread_data_set)
    def __init__(self): 
        this = _kipr.new_thread()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kipr.delete_thread
    __del__ = lambda self : None;
thread_swigregister = _kipr.thread_swigregister
thread_swigregister(thread)


def mutex_create():
  return _kipr.mutex_create()
mutex_create = _kipr.mutex_create

def mutex_lock(*args):
  return _kipr.mutex_lock(*args)
mutex_lock = _kipr.mutex_lock

def mutex_trylock(*args):
  return _kipr.mutex_trylock(*args)
mutex_trylock = _kipr.mutex_trylock

def mutex_unlock(*args):
  return _kipr.mutex_unlock(*args)
mutex_unlock = _kipr.mutex_unlock

def mutex_destroy(*args):
  return _kipr.mutex_destroy(*args)
mutex_destroy = _kipr.mutex_destroy

def thread_create(*args):
  return _kipr.thread_create(*args)
thread_create = _kipr.thread_create

def thread_start(*args):
  return _kipr.thread_start(*args)
thread_start = _kipr.thread_start

def thread_wait(*args):
  return _kipr.thread_wait(*args)
thread_wait = _kipr.thread_wait

def thread_destroy(*args):
  return _kipr.thread_destroy(*args)
thread_destroy = _kipr.thread_destroy

def digital(*args):
  return _kipr.digital(*args)
digital = _kipr.digital

def set_digital_value(*args):
  return _kipr.set_digital_value(*args)
set_digital_value = _kipr.set_digital_value

def get_digital_value(*args):
  return _kipr.get_digital_value(*args)
get_digital_value = _kipr.get_digital_value

def set_digital_output(*args):
  return _kipr.set_digital_output(*args)
set_digital_output = _kipr.set_digital_output

def get_digital_output(*args):
  return _kipr.get_digital_output(*args)
get_digital_output = _kipr.get_digital_output

def get_digital_pullup(*args):
  return _kipr.get_digital_pullup(*args)
get_digital_pullup = _kipr.get_digital_pullup

def set_digital_pullup(*args):
  return _kipr.set_digital_pullup(*args)
set_digital_pullup = _kipr.set_digital_pullup
# This file is compatible with both classic and new-style classes.


